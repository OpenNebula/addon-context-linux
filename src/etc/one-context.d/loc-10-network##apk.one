#!/usr/bin/env bash

# -------------------------------------------------------------------------- #
# Copyright 2010-2014, C12G Labs S.L.                                        #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ACTION=$1

if [ -z "$ACTION" ]; then
    ACTION="none"
fi

# Gets IP address from a given MAC
mac2ip() {
    mac=$1

    let ip_a=0x`echo $mac | cut -d: -f 3`
    let ip_b=0x`echo $mac | cut -d: -f 4`
    let ip_c=0x`echo $mac | cut -d: -f 5`
    let ip_d=0x`echo $mac | cut -d: -f 6`

    ip="$ip_a.$ip_b.$ip_c.$ip_d"

    echo $ip
}

# Gets the network part of an IP
get_network() {
    network=$(get_iface_var "NETWORK")

    if [ -z "$network" ]; then
        IFS=. read -r i1 i2 i3 i4 <<< "$IP"
        IFS=. read -r m1 m2 m3 m4 <<< "$(get_mask)"
        network=$(printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))")
    fi

    echo $network
}

# Gets the network mask
get_mask() {
    mask=$(get_iface_var "MASK")

    if [ -z "$mask" ]; then
        mask="255.255.255.0"
    fi

    echo $mask
}

# Gets device MTU
get_mtu() {
    mtu=$(get_iface_var "MTU")

    echo $mtu
}

is_gateway() {
    if [ -z "$GATEWAY_IFACE_NUM" ]; then
        true
    else
        [ "$IFACE_NUM" = "$GATEWAY_IFACE_NUM" ]
    fi
}

# Gets the network gateway
get_gateway() {
    if is_gateway; then
        get_iface_var "GATEWAY"
    fi
}

# Gets the network gateway6
get_gateway6() {
    if is_gateway; then
        get_iface_var "GATEWAY6"
    fi
}

get_ip() {
    ip=$(get_iface_var "IP")

    echo $ip
}

get_iface_var() {
    var_name="${UPCASE_DEV}_$1"
    var=$(eval "echo \"\${$var_name}\"")

    echo $var
}

gen_iface_conf() {
    cat <<EOT
iface $DEV inet static
  address $IP
  network $NETWORK
  netmask $MASK
EOT

    if [ -n "$MTU" ]; then
        echo "  mtu $MTU"
    fi

    if [ -n "$GATEWAY" ]; then
        echo "  gateway $GATEWAY"

        if [ -n "$METRIC" ]; then
            echo "  metric $METRIC"
        fi
    fi

    echo ""
}

gen_alias_conf() {
    cat <<EOT
iface $DEV inet static
  address $IP
  network $NETWORK
  netmask $MASK
EOT

echo ""
}

gen_alias6_conf() {
    cat <<EOT
iface $DEV inet6 static
  address $IP6
  netmask ${IP6_PREFIX_LENGTH:-64}
  pre-up echo 0 > /proc/sys/net/ipv6/conf/${DEV}/autoconf
  pre-up echo 0 > /proc/sys/net/ipv6/conf/${DEV}/accept_ra
EOT

    if [ -n "$IP6_ULA" ]; then
        cat <<EOT

iface $DEV inet6 static
  address $IP6_ULA
  netmask 64
EOT
    fi

    echo ""
}

gen_iface6_conf() {
    cat <<EOT
iface $DEV inet6 static
  address $IP6
  netmask ${IP6_PREFIX_LENGTH:-64}
  pre-up echo 0 > /proc/sys/net/ipv6/conf/${DEV}/autoconf
  pre-up echo 0 > /proc/sys/net/ipv6/conf/${DEV}/accept_ra
EOT

    if [ -n "$MTU" ]; then
        echo "  mtu $MTU"
    fi

    if [ -n "$GATEWAY6" ]; then
        echo "  gateway $GATEWAY6"
    fi

    if [ -n "$IP6_ULA" ]; then
        cat <<EOT

iface $DEV inet6 static
  address $IP6_ULA
  netmask 64
EOT

        if [ -n "$MTU" ]; then
            echo "  mtu $MTU"
        fi
    fi

    echo ""
}

get_interface_mac()
{
    ip link show | awk '/^[0-9]+: [A-Za-z0-9@]+:/ { device=$2; gsub(/:/, "",device); split(device,dev,"@")} /link\/ether/ { print dev[1]  " " $2 }'
}

get_context_interfaces()
{
    env | grep -E "^ETH[0-9]+_MAC=" | sed 's/_.*$//' | sort
}

get_interface_alias()
{
    env | grep -E "^ETH${INDEX}_ALIAS[0-9]+_MAC=" | cut -d '_' -f 2 | sort
}

get_dev()
{
    list="$1"
    mac="$2"

    echo "$list" | grep "$mac" | cut -d' ' -f1 | tail -n1
}

gen_network_configuration()
{
    cat <<EOT
auto lo
iface lo inet loopback

EOT

    INTERFACE_MAC=$(get_interface_mac)
    CONTEXT_INTERFACES=$(get_context_interfaces)
    GATEWAY_IFACE_NUM=$(echo "$GATEWAY_IFACE" | sed 's/^ETH//')

    for interface in $CONTEXT_INTERFACES; do
        UPCASE_DEV=$interface
        MAC=$(get_iface_var "MAC")
        DEV=$(get_dev "$INTERFACE_MAC" "$MAC")
        IFACE_NUM=$(echo "$UPCASE_DEV" | sed 's/^ETH//')

        IP=$(get_ip)
        NETWORK=$(get_network)
        MASK=$(get_mask)
        MTU=$(get_mtu)
        GATEWAY=$(get_gateway)
        METRIC=$(get_iface_var "METRIC")

        IP6=$(get_iface_var "IP6")
        [[ -z $IP6 ]] && IP6=$(get_iface_var "IPV6")
        IP6_PREFIX_LENGTH=$(get_iface_var "IP6_PREFIX_LENGTH")
        IP6_ULA=$(get_iface_var "IP6_ULA")
        GATEWAY6=$(get_gateway6)
        CONTEXT_FORCE_IPV4=$(get_iface_var "CONTEXT_FORCE_IPV4")

        [ -z "${IP}${IP6}" ] && continue
        [ -z "${DEV}" ] && continue

        echo "auto $DEV"

        [[ -n $IP ]] && gen_iface_conf
        [[ -n $IP6 ]] && gen_iface6_conf

        INDEX=${interface: -1}
        ALIAS=$(get_interface_alias)

        for nic_alias in $ALIAS; do
            UPCASE_DEV="ETH${INDEX}_${nic_alias}"
            IP=$(get_ip)
            NETWORK=$(get_network)
            MASK=$(get_mask)

            IP6=$(get_iface_var "IP6")
            [[ -z $IP6 ]] && IP6=$(get_iface_var "IPV6")
            IP6_PREFIX_LENGTH=$(get_iface_var "IP6_PREFIX_LENGTH")
            IP6_ULA=$(get_iface_var "IP6_ULA")

            EXTERNAL=$(get_iface_var "EXTERNAL")
            EXTERNAL=${EXTERNAL^^}
            DETACH=$(get_iface_var "DETACH")

            if [ -z "${DETACH}" ]; then
                if [ -z "${EXTERNAL}" ] || [ $EXTERNAL = "NO" ]; then
                    [ -n "${IP}"  ] && gen_alias_conf
                    [ -n "${IP6}" ] && gen_alias6_conf
                fi
            fi
        done
    done
}

configure_network()
{
    gen_network_configuration > /etc/network/interfaces
    #echo "source /etc/network/interfaces.d/*.cfg" >> /etc/network/interfaces
}

deactivate_network()
{
    . /etc/os-release

    case "$ID" in
        'ubuntu')
            IFACES=$(/sbin/ifquery --list -a)

            for i in $IFACES; do
                if [ $i != 'lo' ]; then
                    /sbin/ifdown $i
                    /sbin/ip addr flush dev $i
                fi
            done
            ;;
        'alpine')
            service networking stop || true

            #IFACES=$(ip a | \
            #    sed -n 's#^[0-9]\+:[[:space:]]\+\([^:]\+\):[[:space:]].*#\1#p')

            # took from find_ifaces in the networking service
            IFACES=$(\
                awk '$1 == "auto" {
                    for (i = 2; i <= NF; i = i + 1) printf("%s ", $i)
                    }' /etc/network/interfaces)

            for i in $IFACES; do
                if [ $i != 'lo' ]; then
                    /sbin/ip link set dev $i down || true
                    /sbin/ip addr flush dev $i || true
                fi
            done
            ;;
        *)
            service networking stop
            ;;
    esac
}

activate_network()
{
    . /etc/os-release

    case "$ID" in
        'ubuntu')
            IFACES=$(/sbin/ifquery --list -a)

            for i in $IFACES; do
                /sbin/ifup $i
            done
            ;;
        'alpine')
            deactivate_network
            service networking start
            ;;
        *)
            service networking stop
            sleep 1
            service networking start
            ;;
    esac
}

[ $ACTION == "reconfigure" ] && deactivate_network
configure_network
[ $ACTION == "reconfigure" ] && activate_network

