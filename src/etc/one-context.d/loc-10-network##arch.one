#!/usr/bin/env bash

# -------------------------------------------------------------------------- #
# Copyright 2010-2016, OpenNebula Systems                                    #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# Gets IP address from a given MAC
mac2ip() {
    mac=$1

    let ip_a=0x`echo $mac | cut -d: -f 3`
    let ip_b=0x`echo $mac | cut -d: -f 4`
    let ip_c=0x`echo $mac | cut -d: -f 5`
    let ip_d=0x`echo $mac | cut -d: -f 6`

    ip="$ip_a.$ip_b.$ip_c.$ip_d"

    echo $ip
}

mask2cidr() {
    mask=$1
    nbits=0
    IFS=.
    for dec in $mask ; do
        case $dec in
            255) let nbits+=8;;
            254) let nbits+=7 ; break ;;
            252) let nbits+=6 ; break ;;
            248) let nbits+=5 ; break ;;
            240) let nbits+=4 ; break ;;
            224) let nbits+=3 ; break ;;
            192) let nbits+=2 ; break ;;
            128) let nbits+=1 ; break ;;
            0);;
            *) echo "Error: $dec is not recognised"; exit 1
        esac
    done
    echo "$nbits"
}

# Gets the network part of an IP
get_network() {
    network=$(get_iface_var "NETWORK")

    if [ -z "$network" ]; then
        network="$(echo $IP | cut -d'.' -f1,2,3).0"
    fi

    echo $network
}

# Gets the network mask
get_mask() {
    mask=$(get_iface_var "MASK")

    if [ -z "$mask" ]; then
        mask="255.255.255.0"
    fi

    echo $mask
}

# Gets device MTU
get_mtu() {
    mtu=$(get_iface_var "MTU")

    echo $mtu
}

is_gateway() {
    if [ -z "$GATEWAY_IFACE_NUM" ]; then
        true
    else
        [ "$IFACE_NUM" = "$GATEWAY_IFACE_NUM" ]
    fi
}

# Gets the network gateway
get_gateway() {
    if is_gateway; then
        gateway=$(get_iface_var "GATEWAY")

        if [ -z "$gateway" ]; then
            if [ "$DEV" = "eth0" ]; then
                net_prefix=$(echo $NETWORK | cut -d'.' -f1,2,3)
                gateway="${net_prefix}.1"
            fi
        fi

        echo $gateway
    fi
}

# Gets the network gateway6
get_gateway6() {
    if is_gateway; then
        get_iface_var "GATEWAY6"
    fi
}

get_dns() {
    dns=$(get_iface_var "DNS")

    echo $dns
}

get_search_domain() {
    search_domain=$(get_iface_var "SEARCH_DOMAIN")

    echo $search_domain
}

get_ip() {
    ip=$(get_iface_var "IP")

    echo $ip
}

get_iface_var() {
    var_name="${UPCASE_DEV}_$1"
    var=$(eval "echo \"\${$var_name}\"")

    echo $var
}


gen_iface_conf() {

    cat <<EOT
[Network]
Address=$IP/$CIDR
EOT

    if [ -n "$GATEWAY" ]; then
        echo "Gateway=$GATEWAY"
    fi

    if [ -n "$DNS" ]; then
        for dns_server in $DNS; do
            echo "DNS=$dns_server"
        done
    fi

    if [ -n "$SEARCH_DOMAIN" ]; then
        for domain in $SEARCH_DOMAIN; do
            echo "Domains=$domain"
        done
    fi

    echo ""
}

gen_iface6_conf() {
    cat <<EOT
[Network]
Address=$IP6/${IP6_PREFIX_LENGTH:-64}
IPv6AcceptRA=false
EOT

    if [ -n "$GATEWAY6" ]; then
        echo "Gateway=$GATEWAY6"
    fi

    if [ -n "$DNS" ]; then
        for dns_server in $DNS; do
            echo "DNS=$dns_server"
        done
    fi

    if [ -n "$SEARCH_DOMAIN" ]; then
        for domain in $SEARCH_DOMAIN; do
            echo "Domains=$domain"
        done
    fi

    if [ -n "$IP6_ULA" ]; then
        cat <<EOT
[Network]
Address=$IP6_ULA/64
EOT
    fi

    echo ""
}

get_interface_mac()
{
    ip link show | awk '/^[0-9]+: [A-Za-z0-9@]+:/ { device=$2; gsub(/:/, "",device); split(device,dev,"@")} /link\/ether/ { print dev[1]  " " $2 }'
}

get_context_interfaces()
{
    env | grep -E "^ETH[0-9]+_MAC=" | sed 's/_.*$//' | sort
}

get_dev()
{
    list="$1"
    mac="$2"

    echo "$list" | grep "$mac" | cut -d' ' -f1 | tail -n1
}

gen_network_configuration()
{
    INTERFACE_MAC=$(get_interface_mac)
    CONTEXT_INTERFACES=$(get_context_interfaces)
    GATEWAY_IFACE_NUM=$(echo "$GATEWAY_IFACE" | sed 's/^ETH//')

    for interface in $CONTEXT_INTERFACES; do
        UPCASE_DEV=$interface
        MAC=$(get_iface_var "MAC")
        DEV=$(get_dev "$INTERFACE_MAC" "$MAC")
        IFACE_NUM=$(echo "$UPCASE_DEV" | sed 's/^ETH//')

        IP=$(get_ip)
        NETWORK=$(get_network)
        MASK=$(get_mask)
        CIDR=$(mask2cidr "$MASK")
        MTU=$(get_mtu)
        GATEWAY=$(get_gateway)
        DNS=$(get_dns)
        SEARCH_DOMAIN=$(get_search_domain)

        IP6=$(get_iface_var "IP6")
        IP6_PREFIX_LENGTH=$(get_iface_var "IP6_PREFIX_LENGTH")
        IP6_ULA=$(get_iface_var "IP6_ULA")
        GATEWAY6=$(get_gateway6)
        CONTEXT_FORCE_IPV4=$(get_iface_var "CONTEXT_FORCE_IPV4")

        [ -z "${IP}${IP6}" ] && continue
        [ -z "${DEV}" ] && continue

        (
            cat <<EOT
[Match]
Name=$DEV
EOT

    if [ -n "$MTU" ]; then
        cat <<EOT
[Link]
MTUBytes=$MTU
EOT
    fi


            if [ -n "$IP" ] || [ -n "$CONTEXT_FORCE_IPV4" ]; then
                gen_iface_conf
            fi
            if [ -n "$IP6" ]; then
                gen_iface6_conf
            fi
        ) > /etc/systemd/network/"${DEV}".network

    done
}

[ -z "$(env | cut -d= -f1 | grep -E '^ETH[0-9]+_IP6*')" ] && exit 0

gen_network_configuration

