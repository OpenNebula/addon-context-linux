#!/usr/bin/env bash

# -------------------------------------------------------------------------- #
# Copyright 2010-2016, OpenNebula Systems                                    #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

COMMAND=${1}

# Gets IP address from a given MAC
mac2ip() {
    mac=$1

    let ip_a=0x`echo $mac | cut -d: -f 3`
    let ip_b=0x`echo $mac | cut -d: -f 4`
    let ip_c=0x`echo $mac | cut -d: -f 5`
    let ip_d=0x`echo $mac | cut -d: -f 6`

    ip="$ip_a.$ip_b.$ip_c.$ip_d"

    echo $ip
}

# Gets the network part of an IP
get_network() {
    network=$(get_iface_var "NETWORK")

    if [ -z "$network" ]; then
        IFS=. read -r i1 i2 i3 i4 <<< "$IP"
        IFS=. read -r m1 m2 m3 m4 <<< "$(get_mask)"
        network=$(printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))")
    fi

    echo $network
}

# Gets the network mask
get_mask() {
    mask=$(get_iface_var "MASK")

    if [ -z "$mask" ]; then
        mask="255.255.255.0"
    fi

    echo $mask
}

# Gets device MTU
get_mtu() {
    mtu=$(get_iface_var "MTU")

    echo $mtu
}

is_gateway() {
    if [ -z "$GATEWAY_IFACE_NUM" ]; then
        true
    else
        [ "$IFACE_NUM" = "$GATEWAY_IFACE_NUM" ]
    fi
}

# Gets the network gateway
get_gateway() {
    if is_gateway; then
        gateway=$(get_iface_var "GATEWAY")

        echo $gateway
    fi
}

# Gets the network gateway6
get_gateway6() {
    if is_gateway; then
        get_iface_var "GATEWAY6"
    fi
}

get_ip() {
    ip=$(get_iface_var "IP")

    echo $ip
}

get_iface_var() {
    var_name="${UPCASE_DEV}_$1"
    var=$(eval "echo \"\${$var_name}\"")

    echo $var
}

gen_iface_conf() {
    echo -n "ifconfig_${DEV}=\"inet ${IP} netmask ${MASK}"

    if [ -n "${MTU}" ]; then
        echo -n " mtu ${MTU}"
    fi

    echo "\""

    ###

    if [ -n "${GATEWAY}" ]; then
        echo "defaultrouter=\"${GATEWAY}\"" >> /etc/rc.conf.d/routing
    fi
}

gen_alias_conf() {
    echo "ifconfig_${DEV}_alias${ALIAS_NUM}=\"inet ${IP} netmask ${MASK}\""
    ALIAS_NUM=$((ALIAS_NUM + 1))
}

gen_alias6_conf() {
    # very first IPv6 can't be alias
    if [ -n "${HAS_IP6}" ]; then
        echo "ifconfig_${DEV}_alias${ALIAS_NUM}=\"inet6 ${IP6} prefixlen ${IP6_PREFIX_LENGTH:-64}\""
        ALIAS_NUM=$((ALIAS_NUM + 1))
    else
        echo -n "ifconfig_${DEV}_ipv6=\"inet6 ${IP6} prefixlen ${IP6_PREFIX_LENGTH:-64}"

        if [ -n "${MTU}" ]; then
            echo -n " mtu ${MTU}"
        fi

        echo " -accept_rtadv\""
    fi

    if [ -n "${IP6_ULA}" ]; then
        echo "ifconfig_${DEV}_alias${ALIAS_NUM}=\"inet6 ${IP6_ULA} prefixlen 64\""
        ALIAS_NUM=$((ALIAS_NUM + 1))
    fi
}

gen_iface6_conf() {
    echo -n "ifconfig_${DEV}_ipv6=\"inet6 ${IP6} prefixlen ${IP6_PREFIX_LENGTH:-64}"

    if [ -n "${MTU}" ]; then
        echo -n " mtu ${MTU}"
    fi

    echo " -accept_rtadv\""

    if [ -n "${IP6_ULA}" ]; then
        echo "ifconfig_${DEV}_alias${ALIAS_NUM}=\"inet6 ${IP6_ULA} prefixlen 64\""
        ALIAS_NUM=$((ALIAS_NUM + 1))
    fi

    ###

    if [ -n "${GATEWAY6}" ]; then
        echo "ipv6_defaultrouter=\"${GATEWAY6}\"" >> /etc/rc.conf.d/routing
    fi
}

get_interface_mac()
{
    macs_array=($(ifconfig | grep ether | awk '{print $2}'))
    #iface_name=()

    for mac in "${macs_array[@]}"
    do
        echo "$(ifconfig | grep -B 2 $mac | head -n 1 | awk '{print $1}' | cut -d ':' -f 1) $mac"
        #iface_mac+=$(ifconfig | grep -B 2 $mac | head -n 1 | awk '{print $1}' | cut -d ':' -f 1)
    done
}

get_context_interfaces()
{
    env | grep -E "^ETH[0-9]+_MAC=" | sed 's/_.*$//' | sort
}

get_interface_alias()
{
    env | grep -E "^ETH${INDEX}_ALIAS[0-9]+_MAC=" | cut -d '_' -f 2 | sort
}

get_dev()
{
    list="$1"
    mac="$2"

    echo "$list" | grep "$mac" | cut -d' ' -f1 | tail -n1
}

gen_network_configuration()
{
    # clean routing information
    echo -n > /etc/rc.conf.d/routing

    INTERFACE_MAC=$(get_interface_mac)
    CONTEXT_INTERFACES=$(get_context_interfaces)
    GATEWAY_IFACE_NUM=$(echo "$GATEWAY_IFACE" | sed 's/^ETH//')

    for interface in $CONTEXT_INTERFACES; do
        UPCASE_DEV=$interface
        MAC=$(get_iface_var "MAC")
        DEV=$(get_dev "$INTERFACE_MAC" "$MAC")
        IFACE_NUM=$(echo "$UPCASE_DEV" | sed 's/^ETH//')

        IP=$(get_ip)
        NETWORK=$(get_network)
        MASK=$(get_mask)
        MTU=$(get_mtu)
        GATEWAY=$(get_gateway)

        IP6=$(get_iface_var "IP6")
        [[ -z $IP6 ]] && IP6=$(get_iface_var "IPV6")
        IP6_PREFIX_LENGTH=$(get_iface_var "IP6_PREFIX_LENGTH")
        IP6_ULA=$(get_iface_var "IP6_ULA")
        GATEWAY6=$(get_gateway6)

        [ -z "${IP}${IP6}" ] && continue
        [ -z "${DEV}" ] && continue

        INDEX=${interface: -1}
        ALIAS=$(get_interface_alias)
        ALIAS_NUM=0
        HAS_IP6=${IP6}

        [ -n "${IP}"  ] && gen_iface_conf
        [ -n "${IP6}" ] && gen_iface6_conf

        for nic_alias in $ALIAS; do
            UPCASE_DEV="ETH${INDEX}_${nic_alias}"
            IP=$(get_ip)
            MASK=$(get_mask)

            IP6=$(get_iface_var "IP6")
            [[ -z $IP6 ]] && IP6=$(get_iface_var "IPV6")
            IP6_PREFIX_LENGTH=$(get_iface_var "IP6_PREFIX_LENGTH")
            IP6_ULA=$(get_iface_var "IP6_ULA")

            EXTERNAL=$(get_iface_var "EXTERNAL")
            EXTERNAL=${EXTERNAL^^}

            if [ -z "${EXTERNAL}" ] || [ "$EXTERNAL" = "NO" ]; then
                [ -n "${IP}"  ] && gen_alias_conf

                if [ -n "${IP6}" ]; then
                    gen_alias6_conf
                    HAS_IP6=${IP6}
                fi
            fi
        done
    done
}

configure_network()
{
    gen_network_configuration >/etc/rc.conf.d/network

    if [ "${COMMAND}" = 'reconfigure' ]; then
        service netif   restart >/dev/null
        service routing restart >/dev/null
    fi
}

[ -z "$(env | cut -d= -f1 | grep -E '^ETH[0-9]+_IPV*6*')" ] && exit 0

configure_network
