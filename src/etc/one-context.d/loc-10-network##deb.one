#!/usr/bin/env bash

# -------------------------------------------------------------------------- #
# Copyright 2010-2016, OpenNebula Systems                                    #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

COMMAND=${1}

# Gets IP address from a given MAC
mac2ip() {
    mac=$1

    let ip_a=0x`echo $mac | cut -d: -f 3`
    let ip_b=0x`echo $mac | cut -d: -f 4`
    let ip_c=0x`echo $mac | cut -d: -f 5`
    let ip_d=0x`echo $mac | cut -d: -f 6`

    ip="$ip_a.$ip_b.$ip_c.$ip_d"

    echo $ip
}

#Convert network mask to cidr
mask2cidr() {
    nbits=0
    IFS=.
    for dec in $1 ; do
        case $dec in
            255) let nbits+=8;;
            254) let nbits+=7;;
            252) let nbits+=6;;
            248) let nbits+=5;;
            240) let nbits+=4;;
            224) let nbits+=3;;
            192) let nbits+=2;;
            128) let nbits+=1;;
            0);;
            *) echo "Error: $dec is not recognised"; exit 1
        esac
    done
    echo "$nbits"
}

# Gets the network part of an IP
get_network() {
    network=$(get_iface_var "NETWORK")

    if [ -z "$network" ]; then
        IFS=. read -r i1 i2 i3 i4 <<< "$IP"
        IFS=. read -r m1 m2 m3 m4 <<< "$(get_mask)"
        network=$(printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))")
    fi

    echo $network
}

# Gets the network mask
get_mask() {
    mask=$(get_iface_var "MASK")

    if [ -z "$mask" ]; then
        mask="255.255.255.0"
    fi

    echo $mask
}

# Gets device MTU
get_mtu() {
    mtu=$(get_iface_var "MTU")

    echo $mtu
}

is_gateway() {
    if [ -z "$GATEWAY_IFACE_NUM" ]; then
        true
    else
        [ "$IFACE_NUM" = "$GATEWAY_IFACE_NUM" ]
    fi
}

# Gets the network gateway
get_gateway() {
    if is_gateway; then
        gateway=$(get_iface_var "GATEWAY")

        echo $gateway
    fi
}

# Gets the network gateway6
get_gateway6() {
    if is_gateway; then
        get_iface_var "GATEWAY6"
    fi
}

get_ip() {
    ip=$(get_iface_var "IP")

    echo $ip
}

get_dns() {
    dns=$(get_iface_var "DNS")

    echo $dns
}

get_search_domain() {
    search_domain=$(get_iface_var "SEARCH_DOMAIN")

    echo $search_domain
}

get_iface_var() {
    var_name="${UPCASE_DEV}_$1"
    var=$(eval "echo \"\${$var_name}\"")

    echo $var
}

gen_iface_conf() {
    if [ $netplan = "installed" ]; then
        numbits=$(mask2cidr $MASK)
        cat <<EOT
      match:
        macaddress: $MAC
      addresses:
        - $IP/$numbits
EOT

        if [ -n "$MTU" ]; then
            echo "      mtu: $MTU"
        fi

        if [ -n "$GATEWAY" ]; then
            echo "      gateway4: $GATEWAY"
        fi

        if [ -n "$DNS" ]; then
        cat <<EOT
      nameservers:
        addresses: [$DNS]
EOT
        fi

        if [ -n "$SEARCH_DOMAIN" ]; then
            echo "        search: [$SEARCH_DOMAIN]"
        fi
    else
        cat <<EOT
iface $DEV inet static
  address $IP
  network $NETWORK
  netmask $MASK
EOT

        if [ -n "$MTU" ]; then
            echo "  mtu $MTU"
        fi

        if [ -n "$GATEWAY" ]; then
            echo "  gateway $GATEWAY"
        fi
        echo ""
    fi
}

gen_alias_conf() {
    if [ $netplan = "installed" ]; then
        numbits=$(mask2cidr $MASK)
        cat <<EOT
      match:
        macaddress: $MAC
      addresses:
        - $IP/$numbits
EOT
    else
         cat <<EOT
iface $DEV inet static
  address $IP
  network $NETWORK
  netmask $MASK
EOT

         echo ""
     fi
}

gen_alias6_conf() {
    if [ $netplan = "installed" ]; then
        cat <<EOT
      match:
        macaddress: $MAC
      accept-ra: no
      addresses:
        - $IP6/${IP6_PREFIX_LENGTH:-64}
EOT

        if [ -n "$IP6_ULA" ]; then
            cat <<EOT
      match:
        macaddress: $MAC
      addresses:
        - $IP6_ULA/64
EOT
        fi

    else

         cat <<EOT
iface $DEV inet6 static
  address $IP6
  netmask ${IP6_PREFIX_LENGTH:-64}
  autoconf 0
  accept_ra 0
EOT

         if [ -n "$IP6_ULA" ]; then
             cat <<EOT

iface $DEV inet6 static
  address $IP6_ULA
  netmask 64
EOT
         fi

         echo ""
    fi
}

gen_iface6_conf() {
    if [ $netplan = "installed" ]; then
        cat <<EOT
      match:
        macaddress: $MAC
      accept-ra: no
      addresses:
        - $IP6/${IP6_PREFIX_LENGTH:-64}
EOT

        if [ -n "$MTU" ]; then
            echo "      mtu: $MTU"
        fi

        if [ -n "$GATEWAY6" ]; then
            echo "      gateway6: $GATEWAY6"
        fi

        if [ -n "$DNS" ]; then
        cat <<EOT
      nameservers:
        addresses: [$DNS]
EOT
        fi

        if [ -n "$SEARCH_DOMAIN" ]; then
            echo "        search: [$SEARCH_DOMAIN]"
        fi

        if [ -n "$IP6_ULA" ]; then
            cat <<EOT
      match:
        macaddress: $MAC
      accept-ra: no
      addresses:
        - $IP6_ULA/64
EOT
        fi

        if [ -n "$MTU" ]; then
            echo "      mtu: $MTU"
        fi
    else
        cat <<EOT
iface $DEV inet6 static
  address $IP6
  netmask ${IP6_PREFIX_LENGTH:-64}
  autoconf 0
  accept_ra 0
EOT

        if [ -n "$MTU" ]; then
            echo "  mtu $MTU"
        fi

        if [ -n "$GATEWAY6" ]; then
            echo "  gateway $GATEWAY6"
        fi

        if [ -n "$IP6_ULA" ]; then
            cat <<EOT

iface $DEV inet6 static
  address $IP6_ULA
  netmask 64
  autoconf 0
  accept_ra 0
EOT

            if [ -n "$MTU" ]; then
                echo "  mtu $MTU"
            fi
        fi

        echo ""
    fi
}

get_interface_mac()
{
    ip link show | awk '/^[0-9]+: [A-Za-z0-9@]+:/ { device=$2; gsub(/:/, "",device); split(device,dev,"@")} /link\/ether/ { print dev[1]  " " $2 }'
}

get_context_interfaces()
{
    env | grep -E "^ETH[0-9]+_MAC=" | sed 's/_.*$//' | sort
}


get_interface_alias()
{
    env | grep -E "^ETH${INDEX}_ALIAS[0-9]+_MAC=" | cut -d '_' -f 2 | sort
}

get_dev()
{
    list="$1"
    mac="$2"

    echo "$list" | grep "$mac" | cut -d' ' -f1 | tail -n1
}

gen_network_configuration()
{
    if [ $netplan = "installed" ]; then
        cat <<EOT
# This file describes the network interfaces available on your system
# For more information, see netplan(5).
network:
  version: 2
  renderer: networkd
  ethernets:
EOT
    else
        cat <<EOT
auto lo
iface lo inet loopback

EOT
    fi
    INTERFACE_MAC=$(get_interface_mac)
    CONTEXT_INTERFACES=$(get_context_interfaces)
    GATEWAY_IFACE_NUM=$(echo "$GATEWAY_IFACE" | sed 's/^ETH//')

    for interface in $CONTEXT_INTERFACES; do
        UPCASE_DEV=$interface
        MAC=$(get_iface_var "MAC")
        DEV=$(get_dev "$INTERFACE_MAC" "$MAC")
        IFACE_NUM=$(echo "$UPCASE_DEV" | sed 's/^ETH//')

        IP=$(get_ip)
        NETWORK=$(get_network)
        MASK=$(get_mask)
        MTU=$(get_mtu)
        GATEWAY=$(get_gateway)
        DNS=$(get_dns)
        SEARCH_DOMAIN=$(get_search_domain)

        IP6=$(get_iface_var "IP6")
        [[ -z $IP6 ]] && IP6=$(get_iface_var "IPV6")
        IP6_PREFIX_LENGTH=$(get_iface_var "IP6_PREFIX_LENGTH")
        IP6_ULA=$(get_iface_var "IP6_ULA")
        GATEWAY6=$(get_gateway6)

        [ -z "${IP}${IP6}" ] && continue
        [ -z "${DEV}" ] && continue

        if [ $netplan = "installed" ]; then
            echo "    $DEV:"
        else
            echo "auto $DEV"
        fi

        [[ -n $IP ]] && gen_iface_conf
        [[ -n $IP6 ]] && gen_iface6_conf

        INDEX=${interface: -1}
        ALIAS=$(get_interface_alias)

        for nic_alias in $ALIAS; do
            UPCASE_DEV="ETH${INDEX}_${nic_alias}"
            IP=$(get_ip)
            NETWORK=$(get_network)
            MASK=$(get_mask)

            IP6=$(get_iface_var "IP6")
            [[ -z $IP6 ]] && IP6=$(get_iface_var "IPV6")
            IP6_PREFIX_LENGTH=$(get_iface_var "IP6_PREFIX_LENGTH")
            IP6_ULA=$(get_iface_var "IP6_ULA")

            EXTERNAL=$(get_iface_var "EXTERNAL")
            EXTERNAL=${EXTERNAL^^}
            DETACH=$(get_iface_var "DETACH")

            if [ -z "${DETACH}" ]; then
                if [ -z "${EXTERNAL}" ] || [ $EXTERNAL = "NO" ]; then
                    [ -n "${IP}"  ] && gen_alias_conf
                    [ -n "${IP6}" ] && gen_alias6_conf
                fi
            fi
        done
    done
}

configure_network()
{
    if [ $netplan = "installed" ]; then
        gen_network_configuration > /etc/netplan/01-netcfg.yaml
    else
        gen_network_configuration > /etc/network/interfaces
        echo "source /etc/network/interfaces.d/*.cfg" >> /etc/network/interfaces
    fi
}

deactivate_network()
{
    if [ $netplan = "installed" ]; then
        IFACES=`ls /sys/class/net`

        for i in $IFACES; do
            if [ $i != 'lo' ]; then
                "/sbin/ip link set dev $i down"
                /sbin/ip addr flush dev $i
            fi
        done
    else
        IFACES=`/sbin/ifquery --list -a`

        for i in $IFACES; do
            if [ $i != 'lo' ]; then
                /sbin/ifdown $i
                /sbin/ip addr flush dev $i
            fi
        done
    fi
}

activate_network()
{
    if [ $netplan = "installed" ]; then
        /usr/sbin/netplan apply
    else
        IFACES=`/sbin/ifquery --list -a`

        for i in $IFACES; do
            /sbin/ifup $i
        done
    fi
}

[ -z "$(env | cut -d= -f1 | grep -E '^ETH[0-9]+_IPV*6*')" ] && exit 0
netplan=$(dpkg-query -W -f='${Status}' netplan.io | awk '{print $3}')

deactivate_network
configure_network
activate_network
