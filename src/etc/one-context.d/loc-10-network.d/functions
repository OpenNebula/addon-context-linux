#!/usr/bin/env bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2021, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#
# network module interface
#

is_network_supported()
{
    false
}

configure_network()
{
    echo "ERROR [!]: No 'configure_network' implementation for the network type: ${CONTEXT_NETCFG_TYPE}" >&2
    exit 1
}

stop_network()
{
    echo "ERROR [!]: No 'stop_network' implementation for the network type: ${CONTEXT_NETCFG_TYPE}" >&2
    exit 1
}

start_network()
{
    echo "ERROR [!]: No 'start_network' implementation for the network type: ${CONTEXT_NETCFG_TYPE}" >&2
    exit 1
}

reload_network()
{
    echo "ERROR [!]: No 'reload_network' implementation for the network type: ${CONTEXT_NETCFG_TYPE}" >&2
    exit 1
}

#
# generic shared functions
#

# return OS ID
detect_os()
(
    if [ -f /etc/os-release ] ; then
        ID=
        # shellcheck disable=SC1091
        . /etc/os-release
        echo "$ID" | tr '[:upper:]' '[:lower:]'
    else
        uname | tr '[:upper:]' '[:lower:]'
    fi
)

# args: <iface> <name>
get_iface_var()
(
    iface=$(echo "$1" | tr '[:lower:]' '[:upper:]')
    var_name="${iface}_${2}"
    eval "echo \"\${${var_name}}\""
)

# Gets IP address from a given MAC
mac2ip()
(
    mac="$1"

    ip_a=$(echo "$mac" | cut -d: -f 3)
    ip_b=$(echo "$mac" | cut -d: -f 4)
    ip_c=$(echo "$mac" | cut -d: -f 5)
    ip_d=$(echo "$mac" | cut -d: -f 6)

    echo "0x${ip_a}.0x${ip_b}.0x${ip_c}.0x${ip_d}"
)

mask2cidr()
(
    mask="$1"
    nbits=0
    IFS=.
    for dec in $mask ; do
        case "$dec" in
            255) nbits=$((nbits + 8)) ;;
            254) nbits=$((nbits + 7)) ; break ;;
            252) nbits=$((nbits + 6)) ; break ;;
            248) nbits=$((nbits + 5)) ; break ;;
            240) nbits=$((nbits + 4)) ; break ;;
            224) nbits=$((nbits + 3)) ; break ;;
            192) nbits=$((nbits + 2)) ; break ;;
            128) nbits=$((nbits + 1)) ; break ;;
            0) break ;;
            *) echo "Error: $dec is not recognised"; exit 1 ;;
        esac
    done
    echo "$nbits"
)

# Gets the network part of an IP
# arg: <iface>
get_network()
(
    network=$(get_iface_var "$1" "NETWORK")

    if [ -z "$network" ]; then
        ip=$(get_ip "$1")
        mask=$(get_mask "$1")
        network=$(awk -v ip="$ip" -v mask="$mask" 'END {
            split(ip, ip_b, "."); split(mask, mask_b, ".");
            for (i=1; i<=4; ++i) x = x "." and(ip_b[i], mask_b[i]);
            sub(/^./, "", x); print x; }' </dev/null)
    fi

    echo "$network"
)

# Gets the network mask
# arg: <iface>
get_mask()
(
    mask=$(get_iface_var "$1" "MASK")
    echo "${mask:-255.255.255.0}"
)

# Gets device MTU
# arg: <iface>
get_mtu()
(
    mtu=$(get_iface_var "$1" "MTU")
    echo "${mtu:-1500}"
)

# Gets the network gateway
# arg: <iface>
get_gateway()
(
    get_iface_var "$1" "GATEWAY"
)

# Gets the network gateway6
# arg: <iface>
get_gateway6()
(
    get_iface_var "$1" "GATEWAY6"
)

# arg: <iface>
get_ip()
(
    get_iface_var "$1" "IP"
)

# arg: <iface>
get_dns()
(
    get_iface_var "$1" "DNS"
)

# arg: <iface>
get_search_domain()
(
    get_iface_var "$1" "SEARCH_DOMAIN"
)

# arg: <iface>
get_interface_alias()
(
    env | sed -n "s#^\(${1}_ALIAS[0-9]\+\)_MAC=.*#\1#p" | sort
)

get_context_interfaces()
(
    env | grep -E "^ETH[0-9]+_MAC=" | sed 's/_.*$//' | sort
)

get_pci_interfaces()
(
    env | grep -E "^PCI[0-9]+_MAC=" | sed 's/_.*$//' | sort
)

get_interface_mac()
(
    ip link show | awk '/^[0-9]+: [A-Za-z0-9@]+:/ { device=$2; gsub(/:/, "",device); split(device,dev,"@")} /link\/ether/ { print dev[1]  " " $2 }'
)

get_dev()
(
    list="$1"
    mac="$2"

    echo "$list" | grep "$mac" | cut -d' ' -f1 | tail -n1
)

