#!/usr/bin/env bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2021, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#
# network module implementation
#

is_network_supported()
{
    case "${_OS_ID}" in
        freebsd)
            return 0
            ;;
    esac

    return 1
}

configure_network()
{
    gen_resolvconf
    gen_network_configuration > /etc/rc.conf.d/network
}

stop_network()
{
    service netif stop >/dev/null
    service routing stop >/dev/null
}

start_network()
{
    service netif start >/dev/null
    service routing start >/dev/null
}

reload_network()
{
    service netif restart >/dev/null
    service routing restart >/dev/null
}

#
# helper functions
#

get_interface_mac()
(
    macs=$(ifconfig | grep ether | awk '{print $2}')

    for mac in ${macs} ; do
        iface=$(ifconfig | grep -B 2 "$mac" | head -n 1 | awk '{print $1}' | cut -d ':' -f 1)
        echo "${iface} ${mac}"
    done
)

gen_iface_conf()
{
    echo -n "ifconfig_${_DEV}=\"inet ${_IP} netmask ${_MASK}"

    if [ -n "${_MTU}" ]; then
        echo -n " mtu ${_MTU}"
    fi

    echo "\""

    ###

    if [ -n "${_GATEWAY}" ]; then
        echo "defaultrouter=\"${_GATEWAY}\"" >> /etc/rc.conf.d/routing
    fi
}

gen_dhcp_conf()
{
    echo "ifconfig_${_DEV}=\"DHCP\""
}

gen_alias_conf()
{
    echo "ifconfig_${_DEV}_alias${_ALIAS_NUM}=\"inet ${_IP} netmask ${_MASK}\""
    _ALIAS_NUM=$((_ALIAS_NUM + 1))
}

gen_iface6_conf()
{
    echo -n "ifconfig_${_DEV}_ipv6=\"inet6 ${_IP6} prefixlen ${_IP6_PREFIX_LENGTH:-64}"

    if [ -n "${_MTU}" ]; then
        echo -n " mtu ${_MTU}"
    fi

    echo " -accept_rtadv\""

    if [ -n "${_IP6_ULA}" ]; then
        echo "ifconfig_${_DEV}_alias${_ALIAS_NUM}=\"inet6 ${_IP6_ULA} prefixlen 64\""
        _ALIAS_NUM=$((_ALIAS_NUM + 1))
    fi

    ###

    if [ -n "${_GATEWAY6}" ]; then
        echo "ipv6_defaultrouter=\"${_GATEWAY6}\"" >> /etc/rc.conf.d/routing
    fi
}

gen_dhcp6_conf()
{
    # TODO: FreeBSD support for DHCP6 does not seem to be great:
    # https://forums.freebsd.org/threads/ipv6-dhcpv6-client-and-accept_rtadv-vs-rtsold.77421/
    # https://forums.freebsd.org/threads/is-there-a-working-dhcpv6-client-for-freebsd.60168/
    echo "ERROR [!]: DHCP6 on '${_OS_ID}' is not supported" >&2
    return 1
}

gen_alias6_conf()
{
    # very first IPv6 can't be alias
    if [ -n "${_HAS_IP6}" ]; then
        echo "ifconfig_${_DEV}_alias${_ALIAS_NUM}=\"inet6 ${_IP6} prefixlen ${_IP6_PREFIX_LENGTH:-64}\""
        _ALIAS_NUM=$((_ALIAS_NUM + 1))
    else
        echo -n "ifconfig_${_DEV}_ipv6=\"inet6 ${_IP6} prefixlen ${_IP6_PREFIX_LENGTH:-64}"

        if [ -n "${_MTU}" ]; then
            echo -n " mtu ${_MTU}"
        fi

        echo " -accept_rtadv\""
    fi

    if [ -n "${_IP6_ULA}" ]; then
        echo "ifconfig_${_DEV}_alias${_ALIAS_NUM}=\"inet6 ${_IP6_ULA} prefixlen 64\""
        _ALIAS_NUM=$((_ALIAS_NUM + 1))
    fi
}

gen_network_configuration()
{
    # clean routing information
    cat /dev/null > /etc/rc.conf.d/routing

    _CONTEXT_INTERFACES=$(get_context_interfaces)

    for iface in $_CONTEXT_INTERFACES; do
        setup_iface_vars "$iface"

        skip_interface && continue

        if is_true "${_DHCP}" ; then
            gen_dhcp_conf
        elif [ -n "${_IP}" ] ; then
            gen_iface_conf
        fi

        if is_true "${_DHCP6}" ; then
            gen_dhcp6_conf
        elif [ -n "${_IP6}" ] ; then
            gen_iface6_conf
        fi

        _HAS_IP6="${_IP6}"
        _ALIASES=$(get_interface_alias)
        _ALIAS_NUM=0

        for nic_alias in $_ALIASES; do
            setup_ipadr_vars "$nic_alias"
            setup_ip6adr_vars "$nic_alias"
            setup_alias_vars "$nic_alias"

            if [ -z "${_DETACH}" ]; then
                if ! is_true "${_EXTERNAL}" ; then
                    [ -n "${_IP}"  ] && gen_alias_conf

                    if [ -n "${_IP6}" ]; then
                        gen_alias6_conf
                        _HAS_IP6="${_IP6}"
                    fi
                fi
            fi
        done
    done
}
