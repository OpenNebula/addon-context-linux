#!/usr/bin/env bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2021, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#
# network module implementation
#

is_network_supported()
{
    case "${OS_ID}" in
        alpine)
            return 0
            ;;
        debian|ubuntu|devuan)
            return 0
            ;;
    esac

    return 1
}

configure_network()
{
    gen_network_configuration > /etc/network/interfaces

    case "${OS_ID}" in
        debian|ubuntu|devuan)
            echo "source /etc/network/interfaces.d/*.cfg" >> /etc/network/interfaces
            ;;
    esac
}

stop_network() {
    case "${OS_ID}" in
        alpine)
            service networking stop || true

            # took from find_ifaces in the networking service
            IFACES=$(\
                awk '$1 == "auto" {
                    for (i = 2; i <= NF; i = i + 1) printf("%s ", $i)
                    }' /etc/network/interfaces)

            for i in $IFACES; do
                if [ "${i}" != 'lo' ]; then
                    /sbin/ip link set dev "${i}" down || true
                    /sbin/ip addr flush dev "${i}" || true
                fi
            done
            ;;
        debian|ubuntu|devuan)
            if [ -f "/usr/sbin/ifreload" ] ; then
                return 0
            fi

            IFACES=$(/sbin/ifquery --list -a)

            for i in $IFACES; do
                if [ "${i}" != 'lo' ] ; then
                    /sbin/ifdown "${i}"
                    /sbin/ip addr flush dev "${i}"
                fi
            done
            ;;
        *)
            exit 1
            ;;
    esac
}

start_network() {
    case "${OS_ID}" in
        alpine)
            service networking start
            ;;
        debian|ubuntu|devuan)
            if [ -f "/usr/sbin/ifreload" ] ; then
                /usr/sbin/ifreload -a
                return 0
            fi

            IFACES=$(/sbin/ifquery --list -a)

            for i in $IFACES; do
                /sbin/ifup "${i}"
            done
            ;;
        *)
            exit 1
            ;;
    esac
}

reload_network() {
    stop_network
    start_network
}

#
# helper functions
#

gen_iface_conf()
{
    cat <<EOT
iface $DEV inet static
  address $IP
  network $NETWORK
  netmask $MASK
EOT

    if [ -n "$MTU" ]; then
        echo "  mtu $MTU"
    fi

    if [ -n "$GATEWAY" ]; then
        echo "  gateway $GATEWAY"

        if [ -n "$METRIC" ]; then
            echo "  metric $METRIC"
        fi
    fi

    echo ""
}

gen_alias_conf()
{
    cat <<EOT
iface $DEV inet static
  address $IP
  network $NETWORK
  netmask $MASK
EOT

echo ""
}

gen_alias6_conf()
{
    case "${OS_ID}" in
        alpine)
            cat <<EOT
iface $DEV inet6 static
  address $IP6
  netmask ${IP6_PREFIX_LENGTH:-64}
  pre-up echo 0 > /proc/sys/net/ipv6/conf/${DEV}/autoconf
  pre-up echo 0 > /proc/sys/net/ipv6/conf/${DEV}/accept_ra
EOT
            ;;
        debian|ubuntu|devuan)
            cat <<EOT
iface $DEV inet6 static
  address $IP6
  netmask ${IP6_PREFIX_LENGTH:-64}
  autoconf 0
  accept_ra 0
EOT
            ;;
    esac

    if [ -n "$IP6_ULA" ]; then
        cat <<EOT

iface $DEV inet6 static
  address $IP6_ULA
  netmask 64
EOT
    fi

    echo ""
}

gen_iface6_conf()
{
    case "${OS_ID}" in
        alpine)
            cat <<EOT
iface $DEV inet6 static
  address $IP6
  netmask ${IP6_PREFIX_LENGTH:-64}
  pre-up echo 0 > /proc/sys/net/ipv6/conf/${DEV}/autoconf
  pre-up echo 0 > /proc/sys/net/ipv6/conf/${DEV}/accept_ra
EOT
            ;;
        debian|ubuntu|devuan)
            cat <<EOT
iface $DEV inet6 static
  address $IP6
  netmask ${IP6_PREFIX_LENGTH:-64}
  autoconf 0
  accept_ra 0
EOT
            ;;
    esac

    if [ -n "$MTU" ]; then
        echo "  mtu $MTU"
    fi

    if [ -n "$GATEWAY6" ]; then
        echo "  gateway $GATEWAY6"
    fi

    if [ -n "$IP6_ULA" ]; then
        cat <<EOT

iface $DEV inet6 static
  address $IP6_ULA
  netmask 64
EOT

        case "${OS_ID}" in
            debian|ubuntu|devuan)
                cat <<EOT
  autoconf 0
  accept_ra 0
EOT
                ;;
        esac

        if [ -n "$MTU" ]; then
            echo "  mtu $MTU"
        fi
    fi

    echo ""
}

gen_network_configuration()
{
    cat <<EOT
auto lo
iface lo inet loopback

EOT

    INTERFACE_MAC=$(get_interface_mac)
    CONTEXT_INTERFACES=$(get_context_interfaces)

    for iface in $CONTEXT_INTERFACES; do
        MAC=$(get_iface_var "$iface" "MAC")
        DEV=$(get_dev "$INTERFACE_MAC" "$MAC")

        IP=$(get_ip "$iface")
        NETWORK=$(get_network "$iface")
        MASK=$(get_mask "$iface")
        MTU=$(get_mtu "$iface")
        GATEWAY=$(get_gateway "$iface")
        METRIC=$(get_iface_var "$iface" "METRIC")

        IP6=$(get_iface_var "$iface" "IP6")
        [ -z "$IP6" ] && IP6=$(get_iface_var "$iface" "IPV6")
        IP6_PREFIX_LENGTH=$(get_iface_var "$iface" "IP6_PREFIX_LENGTH")
        IP6_ULA=$(get_iface_var "$iface" "IP6_ULA")
        GATEWAY6=$(get_gateway6 "$iface")

        [ -z "${IP}${IP6}" ] && continue
        [ -z "${DEV}" ] && continue

        echo "auto $DEV"

        [ -n "${IP}" ] && gen_iface_conf
        [ -n "${IP6}" ] && gen_iface6_conf

        ALIASES=$(get_interface_alias "$iface")

        for nic_alias in $ALIASES ; do
            IP=$(get_ip "$nic_alias")
            NETWORK=$(get_network "$nic_alias")
            MASK=$(get_mask "$nic_alias")

            IP6=$(get_iface_var "$nic_alias" "IP6")
            [ -z "$IP6" ] && IP6=$(get_iface_var "$nic_alias" "IPV6")
            IP6_PREFIX_LENGTH=$(get_iface_var "$nic_alias" "IP6_PREFIX_LENGTH")
            IP6_ULA=$(get_iface_var "$nic_alias" "IP6_ULA")

            EXTERNAL=$(get_iface_var "$nic_alias" "EXTERNAL")
            EXTERNAL=${EXTERNAL^^}
            DETACH=$(get_iface_var "$nic_alias" "DETACH")

            if [ -z "${DETACH}" ]; then
                if [ -z "${EXTERNAL}" ] || [ "${EXTERNAL}" = "NO" ]; then
                    [ -n "${IP}"  ] && gen_alias_conf
                    [ -n "${IP6}" ] && gen_alias6_conf
                fi
            fi
        done
    done
}

