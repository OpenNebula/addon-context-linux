#!/usr/bin/env bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2021, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#
# network module implementation
#

is_network_supported()
{
    case "${_OS_ID}" in
        alpine)
            return 0
            ;;
        debian|ubuntu|devuan)
            return 0
            ;;
    esac

    return 1
}

configure_network()
{
    gen_resolvconf
    gen_network_configuration > /etc/network/interfaces

    case "${_OS_ID}" in
        debian|ubuntu|devuan)
            echo "source /etc/network/interfaces.d/*.cfg" >> /etc/network/interfaces
            ;;
    esac
}

stop_network()
{
    case "${_OS_ID}" in
        alpine)
            service networking stop || true

            # took from find_ifaces in the networking service
            _ifaces=$(\
                awk '$1 == "auto" {
                    for (i = 2; i <= NF; i = i + 1) printf("%s ", $i)
                    }' /etc/network/interfaces)

            for i in $_ifaces; do
                if [ "${i}" != 'lo' ]; then
                    /sbin/ip link set dev "${i}" down || true
                    /sbin/ip addr flush dev "${i}" || true
                fi
            done
            ;;
        debian|ubuntu|devuan)
            if [ -f "/usr/sbin/ifreload" ] ; then
                return 0
            fi

            _ifaces=$(/sbin/ifquery --list -a)

            for i in $_ifaces; do
                if [ "${i}" != 'lo' ] ; then
                    /sbin/ifdown "${i}"
                    /sbin/ip addr flush dev "${i}"
                fi
            done
            ;;
        *)
            exit 1
            ;;
    esac
}

start_network()
{
    case "${_OS_ID}" in
        alpine)
            service networking start
            ;;
        debian|ubuntu|devuan)
            if [ -f "/usr/sbin/ifreload" ] ; then
                /usr/sbin/ifreload -a
                return 0
            fi

            _ifaces=$(/sbin/ifquery --list -a)

            for i in $_ifaces; do
                /sbin/ifup "${i}"
            done
            ;;
        *)
            exit 1
            ;;
    esac
}

reload_network()
{
    stop_network
    start_network
}

#
# helper functions
#

gen_iface_conf()
{
    cat <<EOT
iface ${_DEV} inet static
  address ${_IP}
  network ${_NETWORK}
  netmask ${_MASK}
EOT

    if [ -n "$_MTU" ]; then
        echo "  mtu ${_MTU}"
    fi

    if [ -n "$_GATEWAY" ]; then
        echo "  gateway ${_GATEWAY}"

        if [ -n "$_METRIC" ]; then
            echo "  metric ${_METRIC}"
        fi
    fi

    echo ""
}

gen_dhcp_conf()
{
    echo "iface ${_DEV} inet dhcp"
}

gen_alias_conf()
{
    cat <<EOT
iface ${_DEV} inet static
  address ${_IP}
  network ${_NETWORK}
  netmask ${_MASK}
EOT

echo ""
}

gen_iface6_conf()
{
    case "${_OS_ID}" in
        alpine)
            cat <<EOT
iface ${_DEV} inet6 static
  address ${_IP6}
  netmask ${_IP6_PREFIX_LENGTH:-64}
  pre-up echo 0 > /proc/sys/net/ipv6/conf/${_DEV}/autoconf
  pre-up echo 0 > /proc/sys/net/ipv6/conf/${_DEV}/accept_ra
EOT
            ;;
        debian|ubuntu|devuan)
            cat <<EOT
iface ${_DEV} inet6 static
  address ${_IP6}
  netmask ${_IP6_PREFIX_LENGTH:-64}
  autoconf 0
  accept_ra 0
EOT
            ;;
    esac

    if [ -n "$_MTU" ]; then
        echo "  mtu ${_MTU}"
    fi

    if [ -n "${_GATEWAY6}" ]; then
        echo "  gateway ${_GATEWAY6}"
    fi

    if [ -n "${_IP6_ULA}" ]; then
        cat <<EOT

iface ${_DEV} inet6 static
  address ${_IP6_ULA}
  netmask 64
EOT

        case "${_OS_ID}" in
            debian|ubuntu|devuan)
                cat <<EOT
  autoconf 0
  accept_ra 0
EOT
                ;;
        esac

        if [ -n "$_MTU" ]; then
            echo "  mtu ${_MTU}"
        fi
    fi

    echo ""
}

gen_dhcp6_conf()
{
    echo "iface ${_DEV} inet6 dhcp"
}

gen_alias6_conf()
{
    case "${_OS_ID}" in
        alpine)
            cat <<EOT
iface ${_DEV} inet6 static
  address ${_IP6}
  netmask ${_IP6_PREFIX_LENGTH:-64}
  pre-up echo 0 > /proc/sys/net/ipv6/conf/${_DEV}/autoconf
  pre-up echo 0 > /proc/sys/net/ipv6/conf/${_DEV}/accept_ra
EOT
            ;;
        debian|ubuntu|devuan)
            cat <<EOT
iface ${_DEV} inet6 static
  address ${_IP6}
  netmask ${_IP6_PREFIX_LENGTH:-64}
  autoconf 0
  accept_ra 0
EOT
            ;;
    esac

    if [ -n "${_IP6_ULA}" ]; then
        cat <<EOT

iface ${_DEV} inet6 static
  address ${_IP6_ULA}
  netmask 64
EOT
    fi

    echo ""
}

gen_network_configuration()
{
    cat <<EOT
auto lo
iface lo inet loopback

EOT

    _CONTEXT_INTERFACES=$(get_context_interfaces)

    for iface in $_CONTEXT_INTERFACES; do
        setup_iface_vars "$iface"

        skip_interface && continue

        echo "auto ${_DEV}"

        if is_true "${_DHCP}" ; then
            gen_dhcp_conf
        elif [ -n "${_IP}" ] ; then
            gen_iface_conf
        fi

        if is_true "${_DHCP6}" ; then
            gen_dhcp6_conf
        elif [ -n "${_IP6}" ] ; then
            gen_iface6_conf
        fi

        _ALIASES=$(get_interface_alias "$iface")

        for nic_alias in $_ALIASES ; do
            setup_ipadr_vars "$nic_alias"
            setup_ip6adr_vars "$nic_alias"
            setup_alias_vars "$nic_alias"

            if [ -z "${_DETACH}" ]; then
                if ! is_true "${_EXTERNAL}" ; then
                    [ -n "${_IP}"  ] && gen_alias_conf
                    [ -n "${_IP6}" ] && gen_alias6_conf
                fi
            fi
        done
    done
}
