#!/usr/bin/env bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2021, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#
# network module implementation
#

is_network_supported()
{
    command -v networkctl >/dev/null

    return $?
}

configure_network()
{
    gen_resolvconf
    gen_network_configuration
}

stop_network()
{
    systemctl stop systemd-networkd.service
}

start_network()
{
    systemctl start systemd-networkd.service
}

reload_network()
{
    systemctl restart systemd-networkd.service
}

#
# helper functions
#

# TODO: remove global variables and get rid off exports
#
# to satisfy shellcheck SC2154:
export os_id
export ip
export network
export mask
export cidr
export dhcp
export ip6
export ip6_prefix_length
export ip6_ula
export dhcp6
export mac
export dev
export mtu
export gateway
export metric
export dns
export search_domains
export gateway6
export external
export detach
export all_nameservers
export all_search_domains

gen_iface_conf()
{
    cat <<EOT
[Network]
Address=${ip}/${cidr}
EOT

    if [ -n "$dns" ]; then
        for _domain in $dns; do
            echo "DNS=${_domain}"
        done
    fi

    if [ -n "$search_domains" ]; then
        for _search_domain in $search_domains; do
            echo "Domains=${_search_domain}"
        done
    fi

    cat <<EOT
[Route]
EOT

    if [ -n "$gateway" ]; then
        echo "Gateway=${gateway}"

        if [ -n "$metric" ]; then
            echo "Metric=${metric}"
        fi
    fi

    echo ""
}

gen_dhcp_conf()
{
    cat <<EOT
[Network]
DHCP=ipv4
EOT
}

gen_alias_conf()
{
    cat <<EOT
[Address]
Address=${ip}/${cidr}
EOT
}

gen_iface6_conf()
{
    cat <<EOT
[Network]
Address=${ip6}/${ip6_prefix_length:-64}
EOT

    echo "IPv6AcceptRA=false"

    if [ -n "$dns" ]; then
        for _domain in $dns; do
            echo "DNS=${_domain}"
        done
    fi

    if [ -n "$search_domains" ]; then
        for _search_domain in $search_domains; do
            echo "Domains=${_search_domain}"
        done
    fi

    cat <<EOT
[Route]
EOT

    if [ -n "$gateway6" ]; then
        echo "Gateway=${gateway6}"
    fi

    if [ -n "$ip6_ula" ]; then
        cat <<EOT
[Network]
Address=${ip6_ula}/64
EOT
    fi

    echo ""
}

gen_dhcp6_conf()
{
    cat <<EOT
[Network]
DHCP=ipv6
IPv6AcceptRA=true
EOT
}

gen_alias6_conf()
{
    cat <<EOT
[Address]
Address=${ip6}/${ip6_prefix_length:-64}
EOT
}

gen_network_configuration()
{
    _context_interfaces=$(get_context_interfaces)

    for _iface in $_context_interfaces; do
        setup_iface_vars "$_iface"

        skip_interface && continue

        {
            cat <<EOT
[Match]
Name=${dev}
EOT

            if [ -n "$mtu" ]; then
                cat <<EOT
[Link]
MTUBytes=${mtu}
EOT
            fi

            if is_true "${dhcp}" ; then
                gen_dhcp_conf
            elif [ -n "${ip}" ] ; then
                gen_iface_conf
            fi

            if is_true "${dhcp6}" ; then
                gen_dhcp6_conf
            elif [ -n "${ip6}" ] ; then
                gen_iface6_conf
            fi

            _aliases=$(get_interface_alias "$_iface")

            for _nic_alias in $_aliases ; do
                setup_ipadr_vars "$_nic_alias"
                setup_ip6adr_vars "$_nic_alias"
                setup_alias_vars "$_nic_alias"

                if [ -z "${detach}" ]; then
                    if ! is_true "${external}" ; then
                        [ -n "${ip}"  ] && gen_alias_conf
                        [ -n "${ip6}" ] && gen_alias6_conf
                    fi
                fi
            done

        } > "/etc/systemd/network/${dev}.network"

    done
}
