#!/usr/bin/env bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2021, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#
# network module implementation
#

is_network_supported()
{
    case "${_OS_ID}" in
        altlinux)
            return 0
            ;;
        fedora|centos|rhel|almalinux|ol|rocky)
            return 0
            ;;
        opensuse*)
            return 0
            ;;
    esac

    return 1
}

configure_network()
{
    gen_resolvconf
    gen_network_configuration
}

stop_network()
{
    systemctl stop systemd-networkd.service
}

start_network()
{
    systemctl start systemd-networkd.service
}

reload_network()
{
    systemctl restart systemd-networkd.service
}

#
# helper functions
#

gen_iface_conf()
{
    cat <<EOT
[Network]
Address=${_IP}/${_CIDR}
EOT

    if [ -n "$_DNS" ]; then
        for _dns in $_DNS; do
            echo "DNS=${_dns}"
        done
    fi

    if [ -n "$_SEARCH_DOMAIN" ]; then
        for _search_domain in $_SEARCH_DOMAIN; do
            echo "Domains=${_search_domain}"
        done
    fi

    cat <<EOT
[Route]
EOT

    if [ -n "$_GATEWAY" ]; then
        echo "Gateway=${_GATEWAY}"

        if [ -n "$_METRIC" ]; then
            echo "Metric=${_METRIC}"
        fi
    fi

    echo ""
}

gen_dhcp_conf()
{
    cat <<EOT
[Network]
DHCP=ipv4
EOT
}

gen_alias_conf()
{
    cat <<EOT
[Address]
Address=${_IP}/${_CIDR}
EOT
}

gen_iface6_conf()
{
    cat <<EOT
[Network]
Address=${_IP6}/${_IP6_PREFIX_LENGTH:-64}
EOT

    echo "IPv6AcceptRA=false"

    if [ -n "$_DNS" ]; then
        for _dns in $_DNS; do
            echo "DNS=${_dns}"
        done
    fi

    if [ -n "$_SEARCH_DOMAIN" ]; then
        for _search_domain in $_SEARCH_DOMAIN; do
            echo "Domains=${_search_domain}"
        done
    fi

    cat <<EOT
[Route]
EOT

    if [ -n "$_GATEWAY6" ]; then
        echo "Gateway=${_GATEWAY6}"
    fi

    if [ -n "$_IP6_ULA" ]; then
        cat <<EOT
[Network]
Address=${_IP6_ULA}/64
EOT
    fi

    echo ""
}

gen_dhcp6_conf()
{
    cat <<EOT
[Network]
DHCP=ipv6
IPv6AcceptRA=true
EOT
}

gen_alias6_conf()
{
    cat <<EOT
[Address]
Address=${_IP6}/${_IP6_PREFIX_LENGTH:-64}
EOT
}

gen_network_configuration()
{
    _CONTEXT_INTERFACES=$(get_context_interfaces)

    for iface in $_CONTEXT_INTERFACES; do
        setup_iface_vars "$iface"

        skip_interface && continue

        {
            cat <<EOT
[Match]
Name=${_DEV}
EOT

            if [ -n "$_MTU" ]; then
                cat <<EOT
[Link]
MTUBytes=${_MTU}
EOT
            fi

            if is_true "${_DHCP}" ; then
                gen_dhcp_conf
            elif [ -n "${_IP}" ] ; then
                gen_iface_conf
            fi

            if is_true "${_DHCP6}" ; then
                gen_dhcp6_conf
            elif [ -n "${_IP6}" ] ; then
                gen_iface6_conf
            fi

            _ALIASES=$(get_interface_alias "$iface")

            for nic_alias in $_ALIASES ; do
                setup_ipadr_vars "$nic_alias"
                setup_ip6adr_vars "$nic_alias"
                setup_alias_vars "$nic_alias"

                if [ -z "${_DETACH}" ]; then
                    if ! is_true "${_EXTERNAL}" ; then
                        [ -n "${_IP}"  ] && gen_alias_conf
                        [ -n "${_IP6}" ] && gen_alias6_conf
                    fi
                fi
            done

        } > "/etc/systemd/network/${_DEV}.network"

    done
}
