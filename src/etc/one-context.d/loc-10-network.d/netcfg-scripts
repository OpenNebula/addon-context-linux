#!/usr/bin/env bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2021, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#
# network module implementation
#

is_network_supported()
{
    case "${OS_ID}" in
        fedora|centos|rhel|almalinux|ol|rocky)
            return 0
            ;;
        opensuse*)
            return 0
            ;;
    esac

    return 1
}

configure_network()
{
    gen_network_configuration
}

stop_network() {
    service network stop
}

start_network() {
    service network start
}

reload_network() {
    service network restart
}

#
# helper functions
#

gen_iface_conf() {
    cat <<EOT
NETMASK="$MASK"
IPADDR="$IP"
EOT

    if [ -n "$GATEWAY" ]; then
        if [ "$CONFIG_PATH" = "/etc/sysconfig/network" ]; then
            echo "default $GATEWAY - $DEV ${METRIC:+metric ${METRIC}}" \
                >> "${CONFIG_PATH}/ifroute-${DEV}"
        else
            echo "default via $GATEWAY dev $DEV ${METRIC:+metric ${METRIC}}" \
                >> "${CONFIG_PATH}/route-${DEV}"
        fi
    fi

    if [ -n "$MTU" ]; then
        echo "MTU=$MTU"
    fi
}

gen_alias_conf() {
    cat <<EOT
IPADDR${ALIAS_NUM}="${IP}"
NETMASK${ALIAS_NUM}="${MASK}"
EOT
}

gen_alias6_conf() {
    if [ "$CONFIG_PATH" = "/etc/sysconfig/network" ]; then
        echo "IPADDR_A6A${ALIAS_NUM}=$IP6/${IP6_PREFIX_LENGTH:-64}"
    else
        IPV6ADDR_SECONDARIES="${IPV6ADDR_SECONDARIES} ${IP6}/${IP6_PREFIX_LENGTH:-64}"
    fi

    if [ -n "$IP6_ULA" ]; then
        if [ "$CONFIG_PATH" = "/etc/sysconfig/network" ]; then
            echo "IPADDR_A6B${ALIAS_NUM}=$IP6_ULA/64"
        else
            IPV6ADDR_SECONDARIES="${IPV6ADDR_SECONDARIES} ${IP6_ULA}/64"
        fi
    fi
}

gen_iface6_conf() {
    if [ "$CONFIG_PATH" = "/etc/sysconfig/network" ]; then
        echo "IPADDR_6A=$IP6/${IP6_PREFIX_LENGTH:-64}"

        cat <<EOT >> "/etc/sysconfig/network/ifsysctl-${DEV}"
net.ipv6.conf.\$SYSCTL_IF.autoconf = 0
net.ipv6.conf.\$SYSCTL_IF.accept_ra = 0
EOT
    else
        cat <<EOT
IPV6INIT=yes
IPV6ADDR=$IP6/${IP6_PREFIX_LENGTH:-64}
IPV6_AUTOCONF=no
EOT
    fi

    if [ -n "$IP6_ULA" ]; then
        if [ "$CONFIG_PATH" = "/etc/sysconfig/network" ]; then
            echo "IPADDR_6B=$IP6_ULA/64"
        else
            IPV6ADDR_SECONDARIES="${IPV6ADDR_SECONDARIES} ${IP6_ULA}/64"
        fi
    fi

    if [ -n "$GATEWAY6" ]; then
        if [ "$CONFIG_PATH" = "/etc/sysconfig/network" ]; then
            echo "default $GATEWAY6 - $DEV" >> "/etc/sysconfig/network/ifroute-${DEV}"
        else
            echo "IPV6_DEFAULTGW=$GATEWAY6"
        fi
    fi

    if [ -n "$MTU" ]; then
        echo "IPV6_MTU=$MTU"
    fi
}

gen_network_configuration()
{
    if [ -d /etc/sysconfig/network-scripts ]; then
        CONFIG_PATH=/etc/sysconfig/network-scripts
    elif [ -d /etc/sysconfig/network ]; then
        CONFIG_PATH=/etc/sysconfig/network
    fi

    INTERFACE_MAC=$(get_interface_mac)
    CONTEXT_INTERFACES=$(get_context_interfaces)

    for iface in $CONTEXT_INTERFACES; do
        MAC=$(get_iface_var "$iface" "MAC")
        DEV=$(get_dev "$INTERFACE_MAC" "$MAC")

        IP=$(get_ip "$iface")
        MASK=$(get_mask "$iface")
        MTU=$(get_mtu "$iface")
        GATEWAY=$(get_gateway "$iface")
        METRIC=$(get_iface_var "$iface" "METRIC")

        IP6=$(get_iface_var "$iface" "IP6")
        [ -z "$IP6" ] && IP6=$(get_iface_var "$iface" "IPV6")
        IP6_PREFIX_LENGTH=$(get_iface_var "$iface" "IP6_PREFIX_LENGTH")
        IP6_ULA=$(get_iface_var "$iface" "IP6_ULA")
        GATEWAY6=$(get_gateway6 "$iface")

        # cumulative variable
        IPV6ADDR_SECONDARIES=''

        [ -z "${IP}${IP6}" ] && continue
        [ -z "${DEV}" ] && continue

        {
            rm -f "/etc/sysconfig/network-scripts/route-${DEV}"
            rm -f "/etc/sysconfig/network/ifroute-${DEV}"
            rm -f "/etc/sysconfig/network/ifsysctl-${DEV}"

            cat <<EOT
DEVICE=$DEV
BOOTPROTO=static
NM_CONTROLLED=no
TYPE=Ethernet
EOT
            if [ "$CONFIG_PATH" = "/etc/sysconfig/network" ]; then
                echo "STARTMODE=auto"
            else
                echo "ONBOOT=yes"
            fi

            [ -n "${IP}" ] && gen_iface_conf
            [ -n "${IP6}" ] && gen_iface6_conf

            ALIASES=$(get_interface_alias "$iface")
            ALIAS_NUM=0

            for nic_alias in $ALIASES; do
                IP=$(get_ip "$nic_alias")
                MASK=$(get_mask "$nic_alias")

                IP6=$(get_iface_var "$nic_alias" "IP6")
                [ -z "$IP6" ] && IP6=$(get_iface_var "$nic_alias" "IPV6")
                IP6_PREFIX_LENGTH=$(get_iface_var "$nic_alias" "IP6_PREFIX_LENGTH")
                IP6_ULA=$(get_iface_var "$nic_alias" "IP6_ULA")

                EXTERNAL=$(get_iface_var "$nic_alias" "EXTERNAL")
                EXTERNAL=${EXTERNAL^^}
                DETACH=$(get_iface_var "$nic_alias" "DETACH")

                if [ -z "${DETACH}" ]; then
                    if [ -z "${EXTERNAL}" ] || [ "${EXTERNAL}" = "NO" ]; then
                        [ -n "${IP}"  ] && gen_alias_conf
                        [ -n "${IP6}" ] && gen_alias6_conf

                        if [ -n "${IP}${IP6}" ]; then
                            ALIAS_NUM=$((ALIAS_NUM + 1))
                        fi
                    fi
                fi
            done

            # on Red Hats, we need just a single configuration
            # entry with all additional IPv6 addresses
            if [ -n "${IPV6ADDR_SECONDARIES}" ]; then
                echo "IPV6ADDR_SECONDARIES='${IPV6ADDR_SECONDARIES## }'"
            fi
        } > "${CONFIG_PATH}/ifcfg-${DEV}"

        # TODO: do we want this here?
        ifup "${DEV}"

    done
}

